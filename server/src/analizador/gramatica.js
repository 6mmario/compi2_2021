/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[5,10],$V2=[1,23],$V3=[1,24],$V4=[1,26],$V5=[1,27],$V6=[1,28],$V7=[1,29],$V8=[1,30],$V9=[1,31],$Va=[1,35],$Vb=[1,36],$Vc=[2,9,10,12,36,37,38,39,40],$Vd=[1,45],$Ve=[1,46],$Vf=[1,47],$Vg=[1,48],$Vh=[2,9,10],$Vi=[1,57],$Vj=[8,42,43],$Vk=[1,63],$Vl=[1,69],$Vm=[1,60],$Vn=[1,61],$Vo=[1,62],$Vp=[1,64],$Vq=[1,65],$Vr=[1,66],$Vs=[1,67],$Vt=[1,68],$Vu=[1,79],$Vv=[1,78],$Vw=[1,80],$Vx=[1,81],$Vy=[1,82],$Vz=[1,83],$VA=[1,84],$VB=[1,85],$VC=[1,86],$VD=[1,87],$VE=[1,88],$VF=[1,89],$VG=[1,90],$VH=[1,92],$VI=[8,43,48,68,70,71,72,73,74,75,76,77,78,79,80,81],$VJ=[2,105],$VK=[1,94],$VL=[1,95],$VM=[1,96],$VN=[1,129],$VO=[43,48],$VP=[8,43,48,68,70,74,75,76,77,78,79,80,81],$VQ=[8,43,48,68,70,71,72,74,75,76,77,78,79,80,81],$VR=[8,43,48,78,79,80,81],$VS=[1,157],$VT=[1,158],$VU=[1,154],$VV=[1,155],$VW=[1,156],$VX=[1,159],$VY=[1,162],$VZ=[1,161],$V_=[1,163],$V$=[1,160],$V01=[2,9,12,31,33,34,36,37,38,39,40,46,50,51,52,64],$V11=[1,200],$V21=[8,48];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES_I":4,"EOF":5,"CLASES":6,"INTERFACES":7,"pyc":8,"llaveC":9,"publico":10,"clase":11,"id":12,"llaveA":13,"INSTRUCCIONES_CLASSE":14,"INSTRUCCION_CLASE":15,"FUNCION":16,"DECLARACION":17,"ASIGNACION":18,"inter":19,"INSTRUCCIONES_INTERFACESS":20,"INSTRUCCION_INTERFACE":21,"FUNCIONI":22,"INSTRUCCIONES":23,"INSTRUCCION":24,"IF":25,"PRINT":26,"DOWHILE":27,"WHILE":28,"FOR":29,"LLAMADA":30,"retorno":31,"EXP":32,"brk":33,"cont":34,"TIPO":35,"entero":36,"t_string":37,"t_caracter":38,"doble":39,"booleano":40,"L_ID":41,"igual":42,"coma":43,"inc":44,"dec":45,"si":46,"para":47,"parc":48,"sino":49,"mientras":50,"hacer":51,"c_for":52,"DECLARACIONFOR":53,"ASIGNACIONFOR":54,"L_PARAMETROS":55,"PARAMETRO":56,"void_":57,"statico":58,"reservada_main":59,"corA":60,"corC":61,"argumentos":62,"L_EXP":63,"sistem":64,"punto":65,"salida":66,"imprimir":67,"menos":68,"not":69,"mas":70,"por":71,"div":72,"pot":73,"menorq":74,"mayorq":75,"menor_igual":76,"mayor_igual":77,"igual_igual":78,"diferente":79,"and":80,"or":81,"num":82,"decimal":83,"cadena":84,"caracter":85,"verdadero":86,"falso":87,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"pyc",9:"llaveC",10:"publico",11:"clase",12:"id",13:"llaveA",19:"inter",31:"retorno",33:"brk",34:"cont",36:"entero",37:"t_string",38:"t_caracter",39:"doble",40:"booleano",42:"igual",43:"coma",44:"inc",45:"dec",46:"si",47:"para",48:"parc",49:"sino",50:"mientras",51:"hacer",52:"c_for",57:"void_",58:"statico",59:"reservada_main",60:"corA",61:"corC",62:"argumentos",64:"sistem",65:"punto",66:"salida",67:"imprimir",68:"menos",69:"not",70:"mas",71:"por",72:"div",73:"pot",74:"menorq",75:"mayorq",76:"menor_igual",77:"mayor_igual",78:"igual_igual",79:"diferente",80:"and",81:"or",82:"num",83:"decimal",84:"cadena",85:"caracter",86:"verdadero",87:"falso"},
productions_: [0,[3,2],[4,2],[4,2],[4,1],[4,1],[4,2],[4,2],[6,6],[14,2],[14,1],[15,1],[15,2],[15,2],[15,1],[7,6],[20,2],[20,1],[21,1],[21,1],[23,2],[23,1],[24,2],[24,2],[24,1],[24,1],[24,1],[24,1],[24,1],[24,2],[24,3],[24,2],[24,2],[24,1],[35,1],[35,1],[35,1],[35,1],[35,1],[17,4],[17,4],[17,2],[41,3],[41,1],[18,3],[18,3],[18,2],[18,2],[25,7],[25,9],[25,11],[25,6],[25,8],[25,10],[25,10],[25,9],[28,7],[28,6],[27,9],[27,8],[29,11],[29,10],[29,11],[29,10],[53,4],[54,3],[54,2],[54,2],[55,3],[55,1],[56,2],[16,9],[16,8],[16,8],[16,7],[16,9],[16,8],[16,8],[16,7],[16,13],[22,7],[22,6],[22,7],[22,6],[30,4],[30,3],[63,3],[63,1],[26,9],[32,2],[32,2],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,2],[32,2],[32,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

								var padre = new nodo_ast("AST","",this._$.first_line, this._$.first_column); 
								padre.hijos = $$[$0-1]; 
								var resultado = { ast : padre , L_errores : lista_errores}; 
								lista_errores = new Array(); 
								
								return resultado; 
								
break;
case 2:

											$$[$0-1].push($$[$0]); 
											this.$= $$[$0-1];
											
break;
case 3:

													$$[$0-1].push($$[$0]); 
													this.$= $$[$0-1];
													
break;
case 4:

								var l_inst = new Array(); 
								l_inst.push($$[$0]); 
								this.$ = l_inst;
								
break;
case 5:

									var l_inst = new Array(); 
									l_inst.push($$[$0]); 
									this.$ = l_inst;
									
break;
case 6: case 7:

								lista_errores.push(new error("El token "+yytext +" no se esperaba." ,"SINTACTICO", yylineno+1, this._$.first_column,yytext)); 
								this.$= new nodo_ast("ERROR","",-1,-1); 
								
break;
case 8:

																var padre = new nodo_ast("clase","",0,0); 
																padre.hijos.push(new nodo_ast("Res_Public",$$[$0-5],this._$.first_line, _$[$0-5].last_column, ""));
																padre.hijos.push(new nodo_ast("Res_Class",$$[$0-4],this._$.first_line, _$[$0-4].last_column,"class"));
																padre.hijos.push(new nodo_ast("identificador",$$[$0-3],this._$.first_line, _$[$0-3].last_column,$$[$0-3])); 
																padre.hijos.push(new nodo_ast("Llave_Abierta",$$[$0-2],this._$.first_line, _$[$0-2].last_column,`${$$[$0-2]}\n`));
																var l_inst = new nodo_ast("Lista_Instrucciones","",0,0);
																l_inst.hijos = $$[$0-1];
																padre.hijos.push(l_inst);
																padre.hijos.push(new nodo_ast("Llave_Cerrada",$$[$0],_$[$0].first_line, _$[$0].last_column, `\n${$$[$0]}`));
																this.$ = padre; 
																
break;
case 9:

															$$[$0-1].push($$[$0]); 
															this.$ = $$[$0-1]; 
															
break;
case 10:

										var l_inst = new Array(); 
										l_inst.push($$[$0]); 
										this.$=l_inst;
										
break;
case 11:

									this.$ = $$[$0];
									
break;
case 12:

									this.$ = $$[$0-1];
									
break;
case 13: case 22: case 23:

								this.$ = $$[$0-1];
								
break;
case 14: case 19:

						lista_errores.push(new error("El token -"+yytext +"- no se esperaba." ,"SINTACTICO", yylineno+1, this._$.first_column,yytext)); 
						this.$= new nodo_ast("ERROR","",-1,-1); 
						
break;
case 15:

																var padre = new nodo_ast("interface","",0,0); 
																padre.hijos.push(new nodo_ast("Res_Public",$$[$0-5],_$[$0-5].first_line, _$[$0-5].last_column));
																padre.hijos.push(new nodo_ast("Res_Interface",$$[$0-4], _$[$0-4].first_line, _$[$0-4].last_column));
																padre.hijos.push(new nodo_ast("identificador",$$[$0-3],_$[$0-3].first_line, _$[$0-3].last_column)); 
																padre.hijos.push(new nodo_ast("Llave_Abierta", $$[$0-2], _$[$0-2].first_line, _$[$0-2].last_column));
																var l_inst = new nodo_ast("Lista_Instrucciones","",0,0);
																l_inst.hijos = $$[$0-1];
																padre.hijos.push(l_inst);
																padre.hijos.push(new nodo_ast("Llave_Cerrada",$$[$0],_$[$0].first_line, _$[$0].last_column));
																this.$ = padre;
																
break;
case 16:

																				$$[$0-1].push($$[$0]); 
																				this.$ = $$[$0-1]; 
																				
break;
case 17:

												var l_inst = new Array(); 
												l_inst.push($$[$0]); 
												this.$=l_inst;
												
break;
case 18:

										this.$ = $$[$0];
										
break;
case 20:

											$$[$0-1].push($$[$0]); 
											this.$ = $$[$0-1]; 
											
break;
case 21:

								var l_inst = new Array(); 
								l_inst.push($$[$0]); 
								this.$=l_inst;
								
break;
case 24: case 27: case 28:

					this.$ = $$[$0];
					
break;
case 25: case 26:

						this.$ = $$[$0];
						
break;
case 29:

							this.$ = $$[$0-1];
							
break;
case 30:

								var padre = new nodo_ast("RETORNO","",0, 0); 
								padre.hijos.push(new nodo_ast("Res_Return",$$[$0-2],this._$.first_line, _$[$0-2].last_column)); 
								padre.hijos.push($$[$0-1]); 
								padre.hijos.push(new nodo_ast("Punto_Coma",$$[$0],this._$.first_line, _$[$0].last_column));
								this.$ = padre;
								
break;
case 31:

						var padre = new nodo_ast("BREAK","",0, 0); 
						padre.hijos.push( new nodo_ast("Res_Breack",$$[$0-1], this._$.first_line, _$[$0-1].last_column)); 
						padre.hijos.push(new nodo_ast("Punto_Coma",$$[$0],this._$.first_line, _$[$0].last_column));
						this.$ = padre;
						
break;
case 32:

						var padre = new nodo_ast("CONTINUE","",0, 0); 
						padre.hijos.push( new nodo_ast("Res_Continue",$$[$0-1], this._$.first_line, _$[$0-1].last_column)); 
						padre.hijos.push(new nodo_ast("Punto_Coma",$$[$0],this._$.first_line, _$[$0].last_column));
						this.$ = padre;
						
break;
case 33:

					lista_errores.push(new error("El token -"+yytext +"- no se esperaba." ,"SINTACTICO", yylineno+1, this._$.first_column,yytext)); 
					this.$= new nodo_ast("ERROR","",-1,-1); 
					
break;
case 34:

				this.$ = new nodo_ast("Tipo",$$[$0],this._$.first_line, this._$.last_column, "" );
				
break;
case 35: case 37: case 38:

				this.$ = new nodo_ast("Tipo",$$[$0],this._$.first_line, this._$.last_column, "");
				
break;
case 36:

					this.$ = new nodo_ast("Tipo",$$[$0],this._$.first_line, this._$.last_column, "");
					
break;
case 39:
 
									var padre = new nodo_ast("DECLARACION","",this._$.last_line, this._$.last_column);
									var l_id = new nodo_ast("Lista_id","",0,0); 
									l_id.hijos = $$[$0-2]; 
									padre.hijos.push(l_id);
									padre.hijos.unshift($$[$0-3]); 
									padre.hijos.push(new nodo_ast("Igual",$$[$0-1],this._$.last_line, _$[$0-1].last_column, `${$$[$0-1]} `));  
									padre.hijos.push($$[$0]); 
									padre.hijos.push(new nodo_ast("Punto_Coma",";",this._$.last_line, this._$.last_column, `;\n `));  
									this.$ = padre;
									
break;
case 40:
 
									var padre = new nodo_ast("DECLARACION","",0,0);
									var l_id = new nodo_ast("Lista_id","",0,0); 
									l_id.hijos = $$[$0-2]; 
									padre.hijos.push(l_id);
									padre.hijos.unshift($$[$0-3]); 
									padre.hijos.push(new nodo_ast("Igual",$$[$0-1],this._$.last_line, _$[$0-1].last_column, `${$$[$0-1]}`));  
									padre.hijos.push($$[$0]); 
									this.$ = padre;
									
break;
case 41:

							var padre = new nodo_ast("DECLARACION","",this._$.last_line, this._$.last_column);
							var l_id = new nodo_ast("Lista_id","",0,0); 
							l_id.hijos = $$[$0]; 
							padre.hijos.push(l_id); 
							padre.hijos.unshift($$[$0-1]);
							padre.hijos.push(new nodo_ast("Punto_Coma",";",this._$.last_line, this._$.last_column,";\n")); 
							this.$ = padre; 
							
break;
case 42:

					$$[$0-2].push(new nodo_ast("Coma",$$[$0-1],this._$.last_line, this._$.last_column,", ")); 
					$$[$0-2].push(new nodo_ast("identificador",$$[$0],this._$.last_line, this._$.last_column,`${$$[$0]} `)); 
					
					this.$ = $$[$0-2];
					
break;
case 43:
 
			var lista_id = new Array(); 
			var f_id = new nodo_ast("identificador",$$[$0],this._$.first_line, this._$.last_column, `${$$[$0]} `); 
			lista_id.push(f_id); 
			this.$ = lista_id;
			
break;
case 44:

							var padre = new nodo_ast("ASIGNACION","",this._$.last_line, this._$.last_column); 
							padre.hijos.push( new nodo_ast("identificador",$$[$0-2],this._$.first_line, _$[$0-2].last_column));
							padre.hijos.push(new nodo_ast("Igual",$$[$0-1],this._$.first_line, _$[$0-1].last_column));
							padre.hijos.push($$[$0]); 
							padre.hijos.push(new nodo_ast("Punto_Coma",";",this._$.first_line, this._$.last_column));
							this.$=padre;
							
break;
case 45:

							var padre = new nodo_ast("ASIGNACION","",this._$.last_line, this._$.last_column); 
							padre.hijos.push( new nodo_ast("identificador",$$[$0-2],this._$.first_line, _$[$0-2].last_column));
							padre.hijos.push(new nodo_ast("Igual",$$[$0-1],this._$.first_line, _$[$0-1].last_column));
							padre.hijos.push($$[$0]); 
							this.$=padre;
							
break;
case 46:

					var padre = new nodo_ast("ASIGNACION","",this._$.last_line, this._$.last_column); 
					padre.hijos.push(new nodo_ast("identificador",$$[$0-1],this._$.first_line, _$[$0-1].last_column));
					padre.hijos.push(new nodo_ast("Incremento",$$[$0],this._$.first_line, _$[$0].last_column)); 
					padre.hijos.push(new nodo_ast("Punto_Coma",";",this._$.first_line, this._$.last_column));
					this.$=padre;
					
break;
case 47:

					var padre = new nodo_ast("ASIGNACION","",this._$.last_line, this._$.last_column); 
					padre.hijos.push(new nodo_ast("identificador",$$[$0-1],this._$.first_line, _$[$0-1].last_column));
					padre.hijos.push(new nodo_ast("Decremento",$$[$0],this._$.first_line, _$[$0].last_column)); 
					padre.hijos.push(new nodo_ast("Punto_Coma",";",this._$.first_line, this._$.last_column));
					this.$=padre;
					
break;
case 48:

													var padre = new nodo_ast("IF","",0,0); 
													padre.hijos.push(new nodo_ast("condicion_if",$$[$0-6],_$[$0-6].first_line,_$[$0-6].last_column));
													padre.hijos.push(new nodo_ast("Parentesis_Abierto",$$[$0-5],this._$.first_line, _$[$0-5].last_column));
													padre.hijos.push($$[$0-4]); 
													padre.hijos.push(new nodo_ast("Parentesis_Cerrado",$$[$0-3],this._$.first_line, _$[$0-3].last_column));
													padre.hijos.push(new nodo_ast("Llave_Abierta",$$[$0-2],_$[$0-2].first_line, _$[$0-2].last_column));
													var l_inst = new nodo_ast("Lista_Instrucciones","",0,0); 
													l_inst.hijos = $$[$0-1];
													padre.hijos.push(l_inst); 
													padre.hijos.push(new nodo_ast("Llave_Cerrada",$$[$0],_$[$0].first_line, _$[$0].last_column));
													this.$ = padre; 
													
break;
case 49:

															var padre = new nodo_ast("IF","",0,0); 
															padre.hijos.push(new nodo_ast("condicion_if",$$[$0-8],_$[$0-8].first_line,_$[$0-8].last_column));
															padre.hijos.push(new nodo_ast("Parentesis_Abierto",$$[$0-7],this._$.first_line, _$[$0-7].last_column));
															padre.hijos.push($$[$0-6]); 
															padre.hijos.push(new nodo_ast("Parentesis_Cerrado",$$[$0-5],this._$.first_line, _$[$0-5].last_column));
															padre.hijos.push(new nodo_ast("Llave_Abierta",$$[$0-4],_$[$0-4].first_line, _$[$0-4].last_column));
															var l_inst = new nodo_ast("Lista_Instrucciones","",0,0); 
															l_inst.hijos = $$[$0-3];
															padre.hijos.push(l_inst);  
															padre.hijos.push(new nodo_ast("Llave_Cerrada",$$[$0-2],_$[$0-2].first_line, _$[$0-2].last_column));
															padre.hijos.push(new nodo_ast("condicion_else",$$[$0-1], _$[$0-1].first_line,_$[$0-1].last_column));
															padre.hijos.push($$[$0]);
															this.$ = padre; 
															
break;
case 50:

															var padre = new nodo_ast("IF","",0,0); 
															padre.hijos.push(new nodo_ast("condicion_if",$$[$0-10],_$[$0-10].first_line,_$[$0-10].last_column));
															padre.hijos.push(new nodo_ast("Parentesis_Abierto",$$[$0-9],this._$.first_line, _$[$0-9].last_column));
															padre.hijos.push($$[$0-8]); 
															padre.hijos.push(new nodo_ast("Parentesis_Cerrado",$$[$0-7],this._$.first_line, _$[$0-7].last_column));
															padre.hijos.push(new nodo_ast("Llave_Abierta",$$[$0-6], _$[$0-6].first_line, _$[$0-6].last_column));
															var l_inst = new nodo_ast("Lista_Instrucciones","",0,0); 
															l_inst.hijos = $$[$0-5];
															padre.hijos.push(l_inst);  
															padre.hijos.push(new nodo_ast("Llave_Cerrada",$$[$0-4],_$[$0-4].first_line, _$[$0-4].last_column));
															var else_ =new nodo_ast("condicion_else",$$[$0-3],_$[$0-3].first_line,_$[$0-3].last_column);
															else_.hijos.push(new nodo_ast("Llave_Abierta",$$[$0-2],_$[$0-2].first_line, _$[$0-2].last_column));
															var l_inst_else = new nodo_ast("Lista_Instrucciones","",0,0);
															l_inst_else.hijos = $$[$0-1]; else_.hijos.push(l_inst_else); 
															else_.hijos.push(new nodo_ast("Llave_Cerrada",$$[$0],_$[$0].first_line, _$[$0].last_column));
															padre.hijos.push(else_); 
															this.$ = padre; 
															
break;
case 51:

										var padre = new nodo_ast("IF","",0,0); 
										padre.hijos.push(new nodo_ast("condicion_if",$$[$0-5],_$[$0-5].first_line,_$[$0-5].last_column));
										padre.hijos.push(new nodo_ast("Parentesis_Abierto",$$[$0-4],this._$.first_line, _$[$0-4].last_column));
										padre.hijos.push($$[$0-3]); 
										padre.hijos.push(new nodo_ast("Parentesis_Cerrado",$$[$0-2],this._$.first_line, _$[$0-2].last_column));
										padre.hijos.push(new nodo_ast("Llave_Abierta",$$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column));
										padre.hijos.push(new nodo_ast("Llave_Cerrada",$$[$0], _$[$0].first_line, _$[$0].last_column));
										this.$ = padre; 
										
break;
case 52:

													var padre = new nodo_ast("IF","",0,0); 
													padre.hijos.push(new nodo_ast("condicion_if",$$[$0-7],_$[$0-7].first_line,_$[$0-7].last_column));
													padre.hijos.push(new nodo_ast("Parentesis_Abierto",$$[$0-6],this._$.first_line, _$[$0-6].last_column));
													padre.hijos.push($$[$0-5]);
													padre.hijos.push(new nodo_ast("Parentesis_Cerrado",$$[$0-4],this._$.first_line, _$[$0-4].last_column));												
													padre.hijos.push(new nodo_ast("Llave_Abierta",$$[$0-3], _$[$0-3].first_line, _$[$0-3].last_column));
													padre.hijos.push(new nodo_ast("Llave_Cerrada",$$[$0-2], _$[$0-2].first_line, _$[$0-2].last_column));
													padre.hijos.push(new nodo_ast("condicion_else",$$[$0-1],_$[$0-1].first_line,_$[$0-1].last_column));
													padre.hijos.push($$[$0]);
													this.$ = padre; 
													
break;
case 53:

																		var padre = new nodo_ast("IF","",0,0); 
																		padre.hijos.push(new nodo_ast("condicion_if",$$[$0-9],_$[$0-9].first_line,_$[$0-9].last_column));
																		padre.hijos.push(new nodo_ast("Parentesis_Abierto",$$[$0-8],this._$.first_line, _$[$0-8].last_column));
																		padre.hijos.push($$[$0-7]); 
																		padre.hijos.push(new nodo_ast("Parentesis_Cerrado",$$[$0-6],this._$.first_line, _$[$0-6].last_column));		
																		padre.hijos.push(new nodo_ast("Llave_Abierta",$$[$0-5],_$[$0-5].first_line, _$[$0-5].last_column));
																		padre.hijos.push(new nodo_ast("Llave_Cerrada",$$[$0-4],_$[$0-4].first_line, _$[$0-4].last_column));																	
																		var else_ =new nodo_ast("condicion_else",$$[$0-3],_$[$0-3].first_line,_$[$0-3].last_column);
																		else_.hijos.push(new nodo_ast("Llave_Abierta",$$[$0-2],_$[$0-2].first_line, _$[$0-2].last_column));
																		var l_inst_else = new nodo_ast("Lista_Instrucciones","",0,0);
																		l_inst_else.hijos = $$[$0-1]; 
																		else_.hijos.push(l_inst_else); 
																		else_.hijos.push(new nodo_ast("Llave_Cerrada",$$[$0], _$[$0].first_line, _$[$0].last_column));
																		padre.hijos.push(else_); 
																		this.$ = padre; 
																		
break;
case 54:

															var padre = new nodo_ast("IF","",0,0); 
															padre.hijos.push(new nodo_ast("condicion_if",$$[$0-9],_$[$0-9].first_line,_$[$0-9].last_column));
															padre.hijos.push(new nodo_ast("Parentesis_Abierto",$$[$0-8],this._$.first_line, _$[$0-8].last_column));
															padre.hijos.push($$[$0-7]); 
															padre.hijos.push(new nodo_ast("Parentesis_Cerrado",$$[$0-6],this._$.first_line, _$[$0-6].last_column));
															padre.hijos.push(new nodo_ast("Llave_Abierta",$$[$0-5], _$[$0-5].first_line, _$[$0-5].last_column));
															var l_inst = new nodo_ast("Lista_Instrucciones","",0,0); 
															l_inst.hijos = $$[$0-4];
															padre.hijos.push(l_inst);  
															padre.hijos.push(new nodo_ast("Llave_Cerrada",$$[$0-3], _$[$0-3].first_line, _$[$0-3].last_column));
															var else_ =new nodo_ast("condicion_else",$$[$0-2],_$[$0-2].first_line,_$[$0-2].last_column);
															else_.hijos.push(new nodo_ast("Llave_Abierta",$$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column));
															else_.hijos.push(new nodo_ast("Llave_Cerrada",$$[$0], _$[$0].first_line, _$[$0].last_column));
															padre.hijos.push(else_); 
															this.$ = padre; 
															
break;
case 55:

															var padre = new nodo_ast("IF","",0,0); 
															padre.hijos.push(new nodo_ast("condicion_if",$$[$0-8],_$[$0-8].first_line,_$[$0-8].last_column));
															padre.hijos.push(new nodo_ast("Parentesis_Abierto",$$[$0-7],this._$.first_line, _$[$0-7].last_column));
															padre.hijos.push($$[$0-6]); 
															padre.hijos.push(new nodo_ast("Parentesis_Cerrado",$$[$0-5],this._$.first_line, _$[$0-5].last_column));		
															padre.hijos.push(new nodo_ast("Llave_Abierta",$$[$0-4], _$[$0-4].first_line, _$[$0-4].last_column));
															padre.hijos.push(new nodo_ast("Llave_Cerrada",$$[$0-3], _$[$0-3].first_line, _$[$0-3].last_column));	
															var else_ =new nodo_ast("condicion_else",$$[$0-2],_$[$0-2].first_line,_$[$0-2].last_column);
															else_.hijos.push(new nodo_ast("Llave_Abierta",$$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column));
															else_.hijos.push(new nodo_ast("Llave_Cerrada",$$[$0], _$[$0].first_line, _$[$0].last_column));
															padre.hijos.push(else_); 
															this.$ = padre; 
															
break;
case 56:

															var padre = new nodo_ast("WHILE","",0,0); 
															padre.hijos.push(new nodo_ast("ciclo_while",$$[$0-6],_$[$0-6].first_line,_$[$0-6].last_column));
															padre.hijos.push(new nodo_ast("Parentesis_Abierto",$$[$0-5],this._$.first_line, _$[$0-5].last_column));
															padre.hijos.push($$[$0-4]);
															padre.hijos.push(new nodo_ast("Parentesis_Cerrado",$$[$0-3],this._$.first_line, _$[$0-3].last_column));	
															padre.hijos.push(new nodo_ast("Llave_Abierta",$$[$0-2],_$[$0-2].first_line, _$[$0-2].last_column));														
															var l_inst = new nodo_ast("Lista_Instrucciones","",0,0); 
															l_inst.hijos = $$[$0-1];
															padre.hijos.push(l_inst); 
															padre.hijos.push(new nodo_ast("Llave_Cerrada",$$[$0],_$[$0].first_line, _$[$0].last_column));	
															this.$ = padre; 
															
break;
case 57:

											var padre = new nodo_ast("WHILE","",0,0); 
											padre.hijos.push(new nodo_ast("ciclo_while",$$[$0-5],_$[$0-5].first_line,_$[$0-5].last_column));
											padre.hijos.push(new nodo_ast("Parentesis_Abierto",$$[$0-4],this._$.first_line, _$[$0-4].last_column));
											padre.hijos.push($$[$0-3]);
											padre.hijos.push(new nodo_ast("Parentesis_Cerrado",$$[$0-2],this._$.first_line, _$[$0-2].last_column));	
											padre.hijos.push(new nodo_ast("Llave_Abierta",$$[$0-1],_$[$0-1].first_line, _$[$0-1].last_column));
											padre.hijos.push(new nodo_ast("Llave_Cerrada",$$[$0],_$[$0].first_line, _$[$0].last_column));											
											this.$ = padre; 
											
break;
case 58:

																		var padre = new nodo_ast("Do_WHILE","",0,0); 
																		padre.hijos.push(new nodo_ast("ciclo_do",$$[$0-8],_$[$0-8].first_line,_$[$0-8].last_column));
																		padre.hijos.push(new nodo_ast("Llave_Abierta",$$[$0-7],_$[$0-7].first_line, _$[$0-7].last_column));
																		var l_inst = new nodo_ast("Lista_Instrucciones","",0,0); 
																		l_inst.hijos = $$[$0-6]; 
																		padre.hijos.push(l_inst);
																		padre.hijos.push(new nodo_ast("Llave_Cerrada",$$[$0-5],_$[$0-5].first_line, _$[$0-5].last_column));
																		padre.hijos.push(new nodo_ast("ciclo_while",$$[$0-4],_$[$0-4].first_line,_$[$0-4].last_column)); 
																		padre.hijos.push(new nodo_ast("Parentesis_Abierto",$$[$0-3],this._$.first_line, _$[$0-3].last_column));
																		padre.hijos.push($$[$0-2]);
																		padre.hijos.push(new nodo_ast("Parentesis_Cerrado",$$[$0-1],this._$.first_line, _$[$0-1].last_column));
																		padre.hijos.push(new nodo_ast("Punto_Coma",$$[$0],this._$.first_line, _$[$0].last_column));
																		this.$ = padre; 
																		
break;
case 59:

															var padre = new nodo_ast("Do_WHILE","",0,0); 
															padre.hijos.push(new nodo_ast("ciclo_do",$$[$0-7],_$[$0-7].first_line,_$[$0-7].last_column));
															padre.hijos.push(new nodo_ast("Llave_Abierta",$$[$0-6],_$[$0-6].first_line, _$[$0-6].last_column));
															padre.hijos.push(new nodo_ast("Llave_Cerrada",$$[$0-5],_$[$0-5].first_line, _$[$0-5].last_column));                                                        
															padre.hijos.push(new nodo_ast("ciclo_while",$$[$0-4],_$[$0-4].first_line,_$[$0-4].last_column)); 
															padre.hijos.push(new nodo_ast("Parentesis_Abierto",$$[$0-3],this._$.first_line, _$[$0-3].last_column));
															padre.hijos.push($$[$0-2]);
															padre.hijos.push(new nodo_ast("Parentesis_Cerrado",$$[$0-1],this._$.first_line, _$[$0-1].last_column));
															padre.hijos.push(new nodo_ast("Punto_Coma",$$[$0],this._$.first_line, _$[$0].last_column));
															this.$ = padre; 
															
break;
case 60:

																						var padre = new nodo_ast("FOR","",0,0); 
																						padre.hijos.push(new nodo_ast("ciclo_for",$$[$0-10],_$[$0-10].first_line,_$[$0-10].last_column));
																						padre.hijos.push(new nodo_ast("Parentesis_Abierto",$$[$0-9],this._$.first_line, _$[$0-9].last_column));
																						padre.hijos.push($$[$0-8]); 
																						padre.hijos.push(new nodo_ast("Punto_Coma",$$[$0-7],this._$.first_line, _$[$0-7].last_column));
																						padre.hijos.push($$[$0-6]);
																						padre.hijos.push(new nodo_ast("Punto_Coma",$$[$0-5],this._$.first_line, _$[$0-5].last_column));
																						padre.hijos.push($$[$0-4]);  
																						padre.hijos.push(new nodo_ast("Parentesis_Cerrado",$$[$0-3],this._$.first_line, _$[$0-3].last_column));
																						padre.hijos.push(new nodo_ast("Llave_Abierta",$$[$0-2],this._$.first_line, _$[$0-2].last_column));
																						var l_inst = new nodo_ast("Lista_Instrucciones","",0,0); 
																						l_inst.hijos = $$[$0-1]; 
																						padre.hijos.push(l_inst);  
																						padre.hijos.push(new nodo_ast("Llave_Cerrada",$$[$0],_$[$0].first_line, _$[$0].last_column));
																						this.$ = padre;
																						
break;
case 61:

																			var padre = new nodo_ast("FOR","",0,0); 
																			padre.hijos.push(new nodo_ast("ciclo_for",$$[$0-9],_$[$0-9].first_line,_$[$0-9].last_column));
																			padre.hijos.push(new nodo_ast("Parentesis_Abierto",$$[$0-8],this._$.first_line, _$[$0-8].last_column));
																			padre.hijos.push($$[$0-7]); 
																			padre.hijos.push(new nodo_ast("Punto_Coma",$$[$0-6],this._$.first_line, _$[$0-6].last_column));
																			padre.hijos.push($$[$0-5]);
																			padre.hijos.push(new nodo_ast("Punto_Coma",$$[$0-4],this._$.first_line, _$[$0-4].last_column));
																			padre.hijos.push($$[$0-3]);  
																			padre.hijos.push(new nodo_ast("Parentesis_Cerrado",$$[$0-2],this._$.first_line, _$[$0-2].last_column));
																			padre.hijos.push(new nodo_ast("Llave_Abierta",$$[$0-1],_$[$0-1].first_line, _$[$0-1].last_column));
																			padre.hijos.push(new nodo_ast("Llave_Cerrada",$$[$0], _$[$0].first_line, _$[$0].last_column));
																			this.$ = padre;
																			
break;
case 62:

																						var padre = new nodo_ast("FOR","",0,0); 
																						padre.hijos.push(new nodo_ast("ciclo_for",$$[$0-10],_$[$0-10].first_line,_$[$0-10].last_column));
																						padre.hijos.push(new nodo_ast("Parentesis_Abierto",$$[$0-9],this._$.first_line, _$[$0-9].last_column));
																						padre.hijos.push($$[$0-8]); 
																						padre.hijos.push(new nodo_ast("Punto_Coma",$$[$0-7],this._$.first_line, _$[$0-7].last_column));
																						padre.hijos.push($$[$0-6]);
																						padre.hijos.push(new nodo_ast("Punto_Coma",$$[$0-5],this._$.first_line, _$[$0-5].last_column));
																						padre.hijos.push($$[$0-4]);  
																						padre.hijos.push(new nodo_ast("Parentesis_Cerrado",$$[$0-3],this._$.first_line, _$[$0-3].last_column));
																						padre.hijos.push(new nodo_ast("Llave_Abierta",$$[$0-2], _$[$0-2].first_line, _$[$0-2].last_column));
																						var l_inst = new nodo_ast("Lista_Instrucciones","",0,0); 
																						l_inst.hijos =$$[$0-1]; 
																						padre.hijos.push(l_inst);  
																						padre.hijos.push(new nodo_ast("Llave_Cerrada",$$[$0],_$[$0].first_line, _$[$0].last_column));
																						this.$ = padre;
																						
break;
case 63:

																			var padre = new nodo_ast("FOR","",0,0); 
																			padre.hijos.push(new nodo_ast("ciclo_for",$$[$0-9],_$[$0-9].first_line,_$[$0-9].last_column));
																			padre.hijos.push(new nodo_ast("Parentesis_Abierto",$$[$0-8],this._$.first_line, _$[$0-8].last_column));
																			padre.hijos.push($$[$0-7]); 
																			padre.hijos.push(new nodo_ast("Punto_Coma",$$[$0-6],this._$.first_line, _$[$0-6].last_column));
																			padre.hijos.push($$[$0-5]);
																			padre.hijos.push(new nodo_ast("Punto_Coma",$$[$0-4],this._$.first_line, _$[$0-4].last_column));
																			padre.hijos.push($$[$0-3]);  
																			padre.hijos.push(new nodo_ast("Parentesis_Cerrado",$$[$0-2],this._$.first_line, _$[$0-2].last_column));
																			padre.hijos.push(new nodo_ast("Llave_Abierta",$$[$0-1],_$[$0-1].first_line, _$[$0-1].last_column));
																			padre.hijos.push(new nodo_ast("Llave_Cerrada",$$[$0],_$[$0].first_line, _$[$0].last_column));
																			this.$ = padre;
																			
break;
case 64:
 
									var padre = new nodo_ast("DECLARACION","",this._$.last_line, this._$.last_column);
									var l_id = new nodo_ast("Lista_id","",0,0); 
									l_id.hijos = $$[$0-2]; 
									padre.hijos.push(l_id);
									padre.hijos.unshift($$[$0-3]); 
									padre.hijos.push(new nodo_ast("Igual",$$[$0-1],this._$.last_line, _$[$0-1].last_column));  
									padre.hijos.push($$[$0]); 
									
									this.$ = padre;
									
break;
case 65:

						var padre = new nodo_ast("ASIGNACION","",this._$.last_line, this._$.last_column); 
						padre.hijos.push( new nodo_ast("identificador",$$[$0-2],this._$.first_line, _$[$0-2].last_column));
						padre.hijos.push(new nodo_ast("Igual",$$[$0-1],this._$.first_line, _$[$0-1].last_column));
						padre.hijos.push($$[$0]); 
						this.$=padre;
						
break;
case 66:

				var padre = new nodo_ast("ASIGNACION","",this._$.last_line, this._$.last_column); 
				padre.hijos.push(new nodo_ast("identificador",$$[$0-1],this._$.first_line, _$[$0-1].last_column));
				padre.hijos.push(new nodo_ast("Incremento",$$[$0],this._$.first_line, _$[$0].last_column)); 
				this.$=padre;
				
break;
case 67:

				var padre = new nodo_ast("ASIGNACION","",this._$.last_line, this._$.last_column); 
				padre.hijos.push(new nodo_ast("identificador",$$[$0-1],this._$.first_line, _$[$0-1].last_column));
				padre.hijos.push(new nodo_ast("Decremento",$$[$0],this._$.first_line, _$[$0].last_column)); 
				this.$=padre;
				
break;
case 68:

											$$[$0-2].push(new nodo_ast("Coma",$$[$0-1],this._$.first_line, _$[$0-1].last_column,`${$$[$0-1]} `));
											$$[$0-2].push($$[$0]); 
											this.$ = $$[$0-2];
											
break;
case 69:

							var l_para = new Array(); 
							l_para.push($$[$0]); 
							this.$ = l_para;
							
break;
case 70:

						var padre = new nodo_ast("PARAMETRO","",0,0); 
						padre.hijos.push($$[$0-1]); 
						var id_ = new nodo_ast("identificador",$$[$0],this._$.last_line, this._$.last_column, `${$$[$0]} `); 
						padre.hijos.push(id_); 
						this.$ = padre;
						
break;
case 71:

																		var padre = new nodo_ast("FUNCION","",0,0); 
																		padre.hijos.push(new nodo_ast("Res_Public",$$[$0-8],this._$.first_line, _$[$0-8].last_column, "function"));
																		padre.hijos.push($$[$0-7]);
																		padre.hijos.push(new nodo_ast("identificador",$$[$0-6],this._$.first_line, _$[$0-6].last_column,`${$$[$0-6]} ` ));
																		padre.hijos.push(new nodo_ast("Parentesis_Abierto",$$[$0-5],this._$.first_line, _$[$0-5].last_column, `${$$[$0-5]} `));
																		var para = new nodo_ast("Lista_Parametros","",0,0); 
																		para.hijos = $$[$0-4]; 
																		padre.hijos.push(para);
																		padre.hijos.push(new nodo_ast("Parentesis_Cerrado",$$[$0-3],this._$.first_line, _$[$0-3].last_column, `${$$[$0-3]} `));
																		padre.hijos.push(new nodo_ast("Llave_Abierta",$$[$0-2],this._$.first_line, _$[$0-2].last_column, `${$$[$0-2]}\n `));
																		var l_inst = new nodo_ast("Lista_Instrucciones","",0,0); 
																		l_inst.hijos = $$[$0-1]; 
																		padre.hijos.push(l_inst); 
																		padre.hijos.push(new nodo_ast("Llave_Cerrada",$$[$0],_$[$0].first_line, _$[$0].last_column, `${$$[$0]}\n `));
																		this.$ = padre;
																		
break;
case 72:

															var padre = new nodo_ast("FUNCION","",0,0); 
															padre.hijos.push(new nodo_ast("Res_Public",$$[$0-7],this._$.first_line, _$[$0-7].last_column,""));
															padre.hijos.push($$[$0-6]);
															padre.hijos.push(new nodo_ast("identificador",$$[$0-5],this._$.first_line, _$[$0-5].last_column,  `${$$[$0-5]} `));
															padre.hijos.push(new nodo_ast("Parentesis_Abierto",$$[$0-4],this._$.first_line, _$[$0-4].last_column,  `${$$[$0-4]}`));
															padre.hijos.push(new nodo_ast("Parentesis_Cerrado",$$[$0-3],this._$.first_line, _$[$0-3].last_column,  `${$$[$0-3]} `));
															padre.hijos.push(new nodo_ast("Llave_Abierta",$$[$0-2],this._$.first_line, _$[$0-2].last_column,  `${$$[$0-2]}\n `));
															var l_inst = new nodo_ast("Lista_Instrucciones","",0,0); 
															l_inst.hijos = $$[$0-1]; 
															padre.hijos.push(l_inst); 
															padre.hijos.push(new nodo_ast("Llave_Cerrada",$$[$0],_$[$0].first_line, _$[$0].last_column,  `${$$[$0]}\n `));
															this.$ = padre;
															
break;
case 73:

															var padre = new nodo_ast("FUNCION","",0,0); 
															padre.hijos.push(new nodo_ast("Res_Public",$$[$0-7],this._$.first_line, _$[$0-7].last_column));
															padre.hijos.push($$[$0-6]);
															padre.hijos.push(new nodo_ast("identificador",$$[$0-5],this._$.first_line, _$[$0-5].last_column));
															padre.hijos.push(new nodo_ast("Parentesis_Abierto",$$[$0-4],this._$.first_line, _$[$0-4].last_column));
															var para = new nodo_ast("Lista_Parametros","",0,0); 
															para.hijos = $$[$0-3]; 
															padre.hijos.push(para);
															padre.hijos.push(new nodo_ast("Parentesis_Cerrado",$$[$0-2],_$[$0-2].first_line, _$[$0-2].last_column));
															padre.hijos.push(new nodo_ast("Llave_Abierta",$$[$0-1],_$[$0-1].first_line, _$[$0-1].last_column));
															padre.hijos.push(new nodo_ast("Llave_Cerrada",$$[$0],_$[$0].first_line, _$[$0].last_column));
															this.$ = padre;
															
break;
case 74:

												var padre = new nodo_ast("FUNCION","",0,0); 
												padre.hijos.push(new nodo_ast("Res_Public",$$[$0-6],this._$.first_line, _$[$0-6].last_column));
												padre.hijos.push($$[$0-5]);
												padre.hijos.push(new nodo_ast("identificador",$$[$0-4], _$[$0-4].first_line, _$[$0-4].last_column));
												padre.hijos.push(new nodo_ast("Parentesis_Abierto",$$[$0-3], _$[$0-3].first_line, _$[$0-3].last_column));
												padre.hijos.push(new nodo_ast("Parentesis_Cerrado",$$[$0-2], _$[$0-2].first_line, _$[$0-2].last_column));
												padre.hijos.push(new nodo_ast("Llave_Abierta",$$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column));
												padre.hijos.push(new nodo_ast("Llave_Cerrada",$$[$0], _$[$0].first_line, _$[$0].last_column));
												this.$ = padre;
												
break;
case 75:

													var padre = new nodo_ast("METODO","",0,0); 
													padre.hijos.push(new nodo_ast("Res_Public", $$[$0-8], this._$.first_line, _$[$0-8].last_column));
													padre.hijos.push(new nodo_ast("Res_Void",$$[$0-7],this._$.first_line, _$[$0-7].last_column));
													padre.hijos.push(new nodo_ast("identificador",$$[$0-6],this._$.first_line, _$[$0-6].last_column));
													padre.hijos.push(new nodo_ast("Parentesis_Abierto",$$[$0-5],this._$.first_line, _$[$0-5].last_column, `${$$[$0-5]}`));
													var para = new nodo_ast("Lista_Parametros","",0,0); 
													para.hijos = $$[$0-4];  
													padre.hijos.push(para);
													padre.hijos.push(new nodo_ast("Parentesis_Cerrado",$$[$0-3],this._$.first_line, _$[$0-3].last_column, `${$$[$0-3]}`));
													padre.hijos.push(new nodo_ast("Llave_Abierta",$$[$0-2],this._$.first_line, _$[$0-2].last_column));
													var l_inst = new nodo_ast("Lista_Instrucciones","",0,0); 
													l_inst.hijos = $$[$0-1]; 
													padre.hijos.push(l_inst); 
													padre.hijos.push(new nodo_ast("Llave_Cerrada",$$[$0],_$[$0].first_line, _$[$0].last_column));
													this.$ = padre;
													
break;
case 76:

													var padre = new nodo_ast("METODO","",0,0); 
													padre.hijos.push(new nodo_ast("Res_Public", $$[$0-7], this._$.first_line, _$[$0-7].last_column));
													padre.hijos.push(new nodo_ast("Res_Void",$$[$0-6],this._$.first_line, _$[$0-6].last_column));
													padre.hijos.push(new nodo_ast("identificador",$$[$0-5],this._$.first_line, _$[$0-5].last_column));
													padre.hijos.push(new nodo_ast("Parentesis_Abierto",$$[$0-4],this._$.first_line, _$[$0-4].last_column));
													padre.hijos.push(new nodo_ast("Parentesis_Cerrado",$$[$0-3],this._$.first_line, _$[$0-3].last_column));
													padre.hijos.push(new nodo_ast("Llave_Abierta",$$[$0-2],this._$.first_line, _$[$0-2].last_column));
													var l_inst = new nodo_ast("Lista_Instrucciones","",0,0); 
													l_inst.hijos = $$[$0-1]; 
													padre.hijos.push(l_inst); 
													padre.hijos.push(new nodo_ast("Llave_Cerrada",$$[$0],_$[$0].first_line, _$[$0].last_column));
													this.$ = padre;
													
break;
case 77:

													var padre = new nodo_ast("METODO","",0,0); 
													padre.hijos.push(new nodo_ast("Res_Public", $$[$0-7], this._$.first_line, _$[$0-7].last_column));
													padre.hijos.push(new nodo_ast("Res_Void",$$[$0-6],this._$.first_line, _$[$0-6].last_column));
													padre.hijos.push(new nodo_ast("identificador",$$[$0-5],this._$.first_line, _$[$0-5].last_column));
													padre.hijos.push(new nodo_ast("Parentesis_Abierto",$$[$0-4],this._$.first_line, _$[$0-4].last_column));
													var para = new nodo_ast("Lista_Parametros","",0,0);  
													para.hijos = $$[$0-3]; 
													padre.hijos.push(para);
													padre.hijos.push(new nodo_ast("Parentesis_Cerrado",$$[$0-2], _$[$0-2].first_line, _$[$0-2].last_column));
													padre.hijos.push(new nodo_ast("Llave_Abierta",$$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column));
													padre.hijos.push(new nodo_ast("Llave_Cerrada",$$[$0], _$[$0].first_line, _$[$0].last_column)); 
													this.$ = padre;
													
break;
case 78:

												var padre = new nodo_ast("METODO","",0,0); 
												padre.hijos.push(new nodo_ast("Res_Public", $$[$0-6], this._$.first_line, _$[$0-6].last_column));
												padre.hijos.push(new nodo_ast("Res_Void",$$[$0-5],this._$.first_line, _$[$0-5].last_column));
												padre.hijos.push(new nodo_ast("identificador",$$[$0-4],this._$.first_line, _$[$0-4].last_column));
												padre.hijos.push(new nodo_ast("Parentesis_Abierto",$$[$0-3],this._$.first_line, _$[$0-3].last_column));
												padre.hijos.push(new nodo_ast("Parentesis_Cerrado",$$[$0-2],this._$.first_line, _$[$0-2].last_column));
												padre.hijos.push(new nodo_ast("Llave_Abierta",$$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column));
												padre.hijos.push(new nodo_ast("Llave_Cerrada",$$[$0], _$[$0].first_line, _$[$0].last_column));
												this.$ = padre;
												
break;
case 79:
 
																		var padre = new nodo_ast("METODO_MAIN","",0,0);
																		padre.hijos.push(new nodo_ast("Res_Public",$$[$0-12],this._$.first_line, _$[$0-12].last_column));
																		padre.hijos.push(new nodo_ast("Res_Static",$$[$0-11],this._$.first_line, _$[$0-11].last_column)); 
																		padre.hijos.push(new nodo_ast("Res_Void",$$[$0-10],this._$.first_line, _$[$0-10].last_column)); 
																		padre.hijos.push(new nodo_ast("Res_Main",$$[$0-9],this._$.first_line, _$[$0-9].last_column));
																		padre.hijos.push(new nodo_ast("Parentesis_Abierto",$$[$0-8],this._$.first_line, _$[$0-8].last_column));
																		padre.hijos.push(new nodo_ast("Tipo",$$[$0-7],this._$.first_line, _$[$0-7].last_column));
																		padre.hijos.push(new nodo_ast("Corchete_Abierto",$$[$0-6],this._$.first_line, _$[$0-6].last_column));
																		padre.hijos.push(new nodo_ast("Corchete_Cerrado",$$[$0-5],this._$.first_line, _$[$0-5].last_column));
																		padre.hijos.push(new nodo_ast("Res_args",$$[$0-4],this._$.first_line, _$[$0-4].last_column));
																		padre.hijos.push(new nodo_ast("Parentesis_Cerrado",$$[$0-3],this._$.first_line, _$[$0-3].last_column));
																		padre.hijos.push(new nodo_ast("Llave_Abierta",$$[$0-2],_$[$0-2].first_line, _$[$0-2].last_column));
																		var l_inst = new nodo_ast("Lista_Instrucciones","",0,0); 
																		l_inst.hijos = $$[$0-1];
																		padre.hijos.push(l_inst); 
																		padre.hijos.push(new nodo_ast("Llave_Cerrada",$$[$0], _$[$0-1].first_line, _$[$0-1].last_column));
																		this.$ = padre; 
																		
break;
case 80:

											var padre = new nodo_ast("FUNCION","",0,0); 
											padre.hijos.push(new nodo_ast("Res_Public",$$[$0-6],this._$.first_line, _$[$0-6].last_column));
											padre.hijos.push($$[$0-5]);
											padre.hijos.push(new nodo_ast("identificador",$$[$0-4],this._$.first_line, _$[$0-4].last_column));
											padre.hijos.push(new nodo_ast("Parentesis_Abierto",$$[$0-3],this._$.first_line, _$[$0-3].last_column));
											var para = new nodo_ast("Lista_Parametros","",0,0); 
											para.hijos = $$[$0-2]; 
											padre.hijos.push(para);
											padre.hijos.push(new nodo_ast("Parentesis_Cerrado",$$[$0-1],this._$.first_line, _$[$0-1].last_column));
											padre.hijos.push(new nodo_ast("Punto_Coma",$$[$0],this._$.first_line, _$[$0].last_column));
											this.$ = padre;
											
break;
case 81:

								var padre = new nodo_ast("FUNCION","",0,0); 
								padre.hijos.push(new nodo_ast("Res_Public",$$[$0-5],this._$.first_line, _$[$0-5].last_column));
								padre.hijos.push($$[$0-4]);
								padre.hijos.push(new nodo_ast("identificador",$$[$0-3],this._$.first_line, _$[$0-3].first_column));
								padre.hijos.push(new nodo_ast("Parentesis_Abierto",$$[$0-2],this._$.first_line, _$[$0-2].first_column));
								padre.hijos.push(new nodo_ast("Parentesis_Cerrado",$$[$0-1],this._$.first_line, _$[$0-1].first_column));
								padre.hijos.push(new nodo_ast("Punto_Coma",$$[$0],this._$.first_line, _$[$0].first_column));
								this.$ = padre;
								
break;
case 82:

											var padre = new nodo_ast("METODO","",0,0); 
											padre.hijos.push(new nodo_ast("Res_Public",$$[$0-6],this._$.first_line, _$[$0-6].last_column));
											padre.hijos.push(new nodo_ast("Res_Void",$$[$0-5],this._$.first_line, _$[$0-5].last_column));
											padre.hijos.push(new nodo_ast("identificador",$$[$0-4],this._$.first_line, _$[$0-4].last_column));
											padre.hijos.push(new nodo_ast("Parentesis_Abierto",$$[$0-3],this._$.first_line, _$[$0-3].last_column));
											var para = new nodo_ast("Lista_Parametros","",0,0); 
											para.hijos = $$[$0-2];  
											padre.hijos.push(para);
											padre.hijos.push(new nodo_ast("Parentesis_Cerrado",$$[$0-1],this._$.first_line, _$[$0-1].last_column));
											padre.hijos.push(new nodo_ast("Punto_Coma",$$[$0],this._$.first_line, _$[$0].first_column));
											this.$ = padre;
											
break;
case 83:

								var padre = new nodo_ast("METODO","",0,0); 
								padre.hijos.push(new nodo_ast("Res_Public",$$[$0-5],this._$.first_line, _$[$0-5].last_column));
								padre.hijos.push(new nodo_ast("Res_Void",$$[$0-4],this._$.first_line, _$[$0-4].last_column));
								padre.hijos.push(new nodo_ast("identificador",$$[$0-3],this._$.first_line, _$[$0-3].last_column));
								padre.hijos.push(new nodo_ast("Parentesis_Abierto",$$[$0-2],this._$.first_line, _$[$0-2].last_column));
								padre.hijos.push(new nodo_ast("Parentesis_Cerrado",$$[$0-1],this._$.first_line, _$[$0-1].last_column));
								padre.hijos.push(new nodo_ast("Punto_Coma",$$[$0],this._$.first_line, _$[$0].first_column));
								this.$ = padre;
								
break;
case 84:
 
								var padre = new nodo_ast("LLAMADA","",0,0); 
								padre.hijos.push(new nodo_ast("identificador",$$[$0-3],this._$.first_line, _$[$0-3].last_column)); 
								padre.hijos.push(new nodo_ast("Parentesis_Abierto",$$[$0-2],this._$.first_line, _$[$0-2].last_column));
								var para = new nodo_ast("PARAMETROS","",0,0); 
								para.hijos = $$[$0-1]; 
								padre.hijos.push(para); 
								padre.hijos.push(new nodo_ast("Parentesis_Cerrado",$$[$0],this._$.first_line, _$[$0].last_column));
								padre.hijos.push(new nodo_ast("Punto_Coma",";",this._$.first_line, this._$.last_column));
								this.$ = padre;
								
break;
case 85:
 
						var padre = new nodo_ast("LLAMADA","",0,0); 
						padre.hijos.push(new nodo_ast("identificador",$$[$0-2],this._$.first_line, _$[$0-2].last_column)); 
						padre.hijos.push(new nodo_ast("Parentesis_Abierto",$$[$0-1],this._$.first_line, _$[$0-1].last_column));
						padre.hijos.push(new nodo_ast("Parentesis_Cerrado",$$[$0],this._$.first_line, _$[$0].last_column));
						padre.hijos.push(new nodo_ast("Punto_Coma",";",this._$.first_line, this._$.last_column));
						this.$ = padre;
						
break;
case 86:

						$$[$0-2].push(new nodo_ast("Coma",$$[$0-1],this._$.last_line, _$[$0-1].last_column)); 
						$$[$0-2].push($$[$0]); 
						this.$= $$[$0-2];
						
break;
case 87:
 
				var a = new Array(); 
				a.push($$[$0]); 
				this.$ = a; 
				
break;
case 88:

																var padre = new nodo_ast("IMPRIMIR","",0,0);
																padre.hijos.push(new nodo_ast("Res_System",$$[$0-8], this._$.first_line , _$[$0-8].last_column))
																padre.hijos.push(new nodo_ast("punto",$$[$0-7], this._$.first_line , _$[$0-7].last_column))
																padre.hijos.push(new nodo_ast("Res_Out",$$[$0-6], this._$.first_line , _$[$0-6].last_column))
																padre.hijos.push(new nodo_ast("punto",$$[$0-5], this._$.first_line , _$[$0-5].last_column))
																padre.hijos.push(new nodo_ast("Res_Print",$$[$0-4], this._$.first_line , _$[$0-4].last_column))
																padre.hijos.push(new nodo_ast("Parentesis_Abierto",$$[$0-3], this._$.first_line , _$[$0-3].last_column))
																padre.hijos.push($$[$0-2]); 
																padre.hijos.push(new nodo_ast("Parentesis_Cerrado",$$[$0-1], this._$.first_line , _$[$0-1].last_column))
																padre.hijos.push(new nodo_ast("Punto_Coma",$$[$0], this._$.first_line , _$[$0].last_column))
																this.$= padre;
																
break;
case 89:

								var padre = new nodo_ast("EXP","",this._$.first_line, this._$.last_column);
								padre.hijos.push(new nodo_ast("op_aritmetica",$$[$0-1],this._$.first_line, _$[$0-1].last_column)); 
								padre.hijos.push($$[$0]); 
								this.$ = padre;
								
break;
case 90:

				var padre = new nodo_ast("EXP","",this._$.first_line, this._$.last_column); 
				padre.hijos.push(new nodo_ast("op_logica",$$[$0-1],this._$.first_line, _$[$0-1].last_column)); 
				padre.hijos.push($$[$0]); 
				this.$ = padre;
				
break;
case 91: case 93: case 94:

					var padre = new nodo_ast("EXP","",this._$.first_line, this._$.last_column); 
					padre.hijos.push($$[$0-2]); 
					padre.hijos.push(new nodo_ast("op_aritmetica",$$[$0-1],this._$.first_line, _$[$0-1].last_column)); 
					padre.hijos.push($$[$0]); 
					this.$ = padre;
					
break;
case 92:

						var padre = new nodo_ast("EXP","",this._$.first_line, this._$.last_column); 
						padre.hijos.push($$[$0-2]); 
						padre.hijos.push(new nodo_ast("op_aritmetica",$$[$0-1],this._$.first_line, _$[$0-1].last_column)); 
						padre.hijos.push($$[$0]); 
						this.$ = padre;
						
break;
case 95: case 102: case 103:

					var padre = new nodo_ast("EXP","",this._$.first_line, this._$.last_column); 
					padre.hijos.push($$[$0-2]); 
					padre.hijos.push(new nodo_ast("op_logica",$$[$0-1],this._$.first_line, _$[$0-1].last_column)); 
					padre.hijos.push($$[$0]); 
					this.$ = padre;
					
break;
case 96: case 97:

						var padre = new nodo_ast("EXP","",this._$.first_line, this._$.last_column); 
						padre.hijos.push($$[$0-2]); 
						padre.hijos.push(new nodo_ast("op_relacional",$$[$0-1],this._$.first_line, _$[$0-1].last_column)); 
						padre.hijos.push($$[$0]); 
						this.$ = padre;
						
break;
case 98: case 99: case 100: case 101:

							var padre = new nodo_ast("EXP","",this._$.first_line, this._$.last_column); 
							padre.hijos.push($$[$0-2]); 
							padre.hijos.push(new nodo_ast("op_relacional",$$[$0-1],this._$.first_line, _$[$0-1].last_column)); 
							padre.hijos.push($$[$0]); 
							this.$ = padre;
							
break;
case 104:

			this.$ = new nodo_ast("int",$$[$0],this._$.first_line, this._$.last_column);
			
break;
case 105:
 
			this.$ = new nodo_ast("identificador",$$[$0],this._$.first_line, this._$.last_column);
			
break;
case 106:

				this.$ = new nodo_ast("double",$$[$0],this._$.first_line, this._$.last_column);
				
break;
case 107:

				this.$ = new nodo_ast("cadena",$$[$0],this._$.first_line, this._$.last_column);
				
break;
case 108:

				this.$ = new nodo_ast("char",$$[$0],this._$.first_line, this._$.last_column);
				
break;
case 109:
 
				this.$ = new nodo_ast("boolean",$$[$0],this._$.first_line, this._$.last_column);
				
break;
case 110:
 
			this.$ = new nodo_ast("boolean",$$[$0],this._$.first_line, this._$.last_column);
			
break;
case 111:
 
				var padre = new nodo_ast("EXP","",this._$.first_line, this._$.last_column); 
				padre.hijos.push(new nodo_ast("identificador",$$[$0-1],this._$.first_line, _$[$0-1].last_column));
				padre.hijos.push(new nodo_ast("Adicion",$$[$0],this._$.first_line, _$[$0].last_column));
				this.$ = padre;
				
break;
case 112:
 
				var padre = new nodo_ast("EXP","",this._$.first_line, this._$.last_column); 
				padre.hijos.push(new nodo_ast("identificador",$$[$0-1],this._$.first_line, _$[$0-1].last_column));
				padre.hijos.push(new nodo_ast("Sustraccion",$$[$0],this._$.first_line, _$[$0].last_column));
				this.$ = padre;
				
break;
case 113:

					var padre = new nodo_ast("EXP","",this._$.first_line, this._$.last_column); 
					padre.hijos.push(new nodo_ast("Parentesis_Abierto",$$[$0-2],this._$.first_line, _$[$0-2].last_column));
					padre.hijos.push($$[$0-1]); 
					padre.hijos.push(new nodo_ast("Parentesis_Cerrado",$$[$0],_$[$0].first_line,_$[$0].last_column)); 
					this.$ = padre;
					
break;
}
},
table: [{2:[1,5],3:1,4:2,6:3,7:4,10:$V0},{1:[3]},{5:[1,7],6:8,7:9,10:$V0},o($V1,[2,4]),o($V1,[2,5]),{8:[1,10],9:[1,11]},{11:[1,12],19:[1,13]},{1:[2,1]},o($V1,[2,2]),o($V1,[2,3]),o($V1,[2,6]),o($V1,[2,7]),{12:[1,14]},{12:[1,15]},{13:[1,16]},{13:[1,17]},{2:$V2,10:$V3,12:$V4,14:18,15:19,16:20,17:21,18:22,35:25,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9},{2:$Va,10:$Vb,20:32,21:33,22:34},{2:$V2,9:[1,37],10:$V3,12:$V4,15:38,16:20,17:21,18:22,35:25,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9},o($Vc,[2,10]),o($Vc,[2,11]),{8:[1,39]},{8:[1,40]},o($Vc,[2,14]),{35:41,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,57:[1,42],58:[1,43]},{12:$Vd,41:44},{42:$Ve,44:$Vf,45:$Vg},{12:[2,34]},{12:[2,35]},{12:[2,36]},{12:[2,37]},{12:[2,38]},{2:$Va,9:[1,49],10:$Vb,21:50,22:34},o($Vh,[2,17]),o($Vh,[2,18]),o($Vh,[2,19]),{35:51,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,57:[1,52]},o($V1,[2,8]),o($Vc,[2,9]),o($Vc,[2,12]),o($Vc,[2,13]),{12:[1,53]},{12:[1,54]},{57:[1,55]},{8:[2,41],42:[1,56],43:$Vi},o($Vj,[2,43]),{12:$Vk,30:59,32:58,47:$Vl,68:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt},{8:[2,46]},{8:[2,47]},o($V1,[2,15]),o($Vh,[2,16]),{12:[1,70]},{12:[1,71]},{47:[1,72]},{47:[1,73]},{59:[1,74]},{12:$Vk,30:76,32:75,47:$Vl,68:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt},{12:[1,77]},{8:[2,44],68:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG},{8:[2,45]},{12:$VH,32:91,47:$Vl,68:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt},{12:$VH,32:93,47:$Vl,68:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt},o($VI,[2,104]),o([8,68,70,71,72,73,74,75,76,77,78,79,80,81],$VJ,{44:$VK,45:$VL,47:$VM}),o($VI,[2,106]),o($VI,[2,107]),o($VI,[2,108]),o($VI,[2,109]),o($VI,[2,110]),{12:$VH,32:97,47:$Vl,68:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt},{47:[1,98]},{47:[1,99]},{35:103,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,48:[1,101],55:100,56:102},{35:103,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,48:[1,105],55:104,56:102},{47:[1,106]},{8:[2,39],68:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG},{8:[2,40]},o($Vj,[2,42]),{12:$VH,32:107,47:$Vl,68:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt},{12:$VH,32:108,47:$Vl,68:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt},{12:$VH,32:109,47:$Vl,68:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt},{12:$VH,32:110,47:$Vl,68:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt},{12:$VH,32:111,47:$Vl,68:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt},{12:$VH,32:112,47:$Vl,68:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt},{12:$VH,32:113,47:$Vl,68:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt},{12:$VH,32:114,47:$Vl,68:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt},{12:$VH,32:115,47:$Vl,68:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt},{12:$VH,32:116,47:$Vl,68:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt},{12:$VH,32:117,47:$Vl,68:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt},{12:$VH,32:118,47:$Vl,68:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt},{12:$VH,32:119,47:$Vl,68:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt},o($VI,[2,89]),o($VI,$VJ,{44:$VK,45:$VL}),o($VI,[2,90]),o($VI,[2,111]),o($VI,[2,112]),{12:$VH,32:122,47:$Vl,48:[1,121],63:120,68:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt},{48:[1,123],68:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG},{35:103,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,48:[1,125],55:124,56:102},{35:103,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,48:[1,127],55:126,56:102},{43:$VN,48:[1,128]},{13:[1,130]},o($VO,[2,69]),{12:[1,131]},{43:$VN,48:[1,132]},{13:[1,133]},{37:[1,134]},o($VP,[2,91],{71:$Vw,72:$Vx,73:$Vy}),o($VP,[2,92],{71:$Vw,72:$Vx,73:$Vy}),o($VQ,[2,93],{73:$Vy}),o($VQ,[2,94],{73:$Vy}),o($VQ,[2,95],{73:$Vy}),o($VR,[2,96],{68:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy}),o($VR,[2,97],{68:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy}),o($VR,[2,98],{68:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy}),o($VR,[2,99],{68:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy}),o($VR,[2,100],{68:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC}),o($VR,[2,101],{68:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC}),o([8,43,48,80,81],[2,102],{68:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE}),o([8,43,48,81],[2,103],{68:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF}),{43:[1,136],48:[1,135]},{8:[2,85]},o($VO,[2,87],{68:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG}),o($VI,[2,113]),{43:$VN,48:[1,137]},{8:[1,138]},{43:$VN,48:[1,139]},{8:[1,140]},{13:[1,141]},{35:103,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,56:142},{2:$VS,9:[1,144],12:$VT,17:146,18:147,23:143,24:145,25:148,26:149,27:150,28:151,29:152,30:153,31:$VU,33:$VV,34:$VW,35:25,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,46:$VX,50:$VY,51:$VZ,52:$V_,64:$V$},o($VO,[2,70]),{13:[1,164]},{2:$VS,9:[1,166],12:$VT,17:146,18:147,23:165,24:145,25:148,26:149,27:150,28:151,29:152,30:153,31:$VU,33:$VV,34:$VW,35:25,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,46:$VX,50:$VY,51:$VZ,52:$V_,64:$V$},{60:[1,167]},{8:[2,84]},{12:$VH,32:168,47:$Vl,68:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt},{8:[1,169]},o($Vh,[2,81]),{8:[1,170]},o($Vh,[2,83]),{2:$VS,9:[1,172],12:$VT,17:146,18:147,23:171,24:145,25:148,26:149,27:150,28:151,29:152,30:153,31:$VU,33:$VV,34:$VW,35:25,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,46:$VX,50:$VY,51:$VZ,52:$V_,64:$V$},o($VO,[2,68]),{2:$VS,9:[1,173],12:$VT,17:146,18:147,24:174,25:148,26:149,27:150,28:151,29:152,30:153,31:$VU,33:$VV,34:$VW,35:25,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,46:$VX,50:$VY,51:$VZ,52:$V_,64:$V$},o($Vc,[2,74]),o($V01,[2,21]),{8:[1,175]},{8:[1,176]},o($V01,[2,24]),o($V01,[2,25]),o($V01,[2,26]),o($V01,[2,27]),o($V01,[2,28]),{8:[1,177]},{12:$VH,32:178,47:$Vl,68:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt},{8:[1,179]},{8:[1,180]},o($V01,[2,33]),{42:$Ve,44:$Vf,45:$Vg,47:$VM},{47:[1,181]},{65:[1,182]},{13:[1,183]},{47:[1,184]},{47:[1,185]},{2:$VS,9:[1,187],12:$VT,17:146,18:147,23:186,24:145,25:148,26:149,27:150,28:151,29:152,30:153,31:$VU,33:$VV,34:$VW,35:25,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,46:$VX,50:$VY,51:$VZ,52:$V_,64:$V$},{2:$VS,9:[1,188],12:$VT,17:146,18:147,24:174,25:148,26:149,27:150,28:151,29:152,30:153,31:$VU,33:$VV,34:$VW,35:25,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,46:$VX,50:$VY,51:$VZ,52:$V_,64:$V$},o($Vc,[2,78]),{61:[1,189]},o($VO,[2,86],{68:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG}),o($Vh,[2,80]),o($Vh,[2,82]),{2:$VS,9:[1,190],12:$VT,17:146,18:147,24:174,25:148,26:149,27:150,28:151,29:152,30:153,31:$VU,33:$VV,34:$VW,35:25,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,46:$VX,50:$VY,51:$VZ,52:$V_,64:$V$},o($Vc,[2,73]),o($Vc,[2,72]),o($V01,[2,20]),o($V01,[2,22]),o($V01,[2,23]),o($V01,[2,29]),{8:[1,191],68:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG},o($V01,[2,31]),o($V01,[2,32]),{12:$VH,32:192,47:$Vl,68:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt},{66:[1,193]},{2:$VS,9:[1,195],12:$VT,17:146,18:147,23:194,24:145,25:148,26:149,27:150,28:151,29:152,30:153,31:$VU,33:$VV,34:$VW,35:25,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,46:$VX,50:$VY,51:$VZ,52:$V_,64:$V$},{12:$VH,32:196,47:$Vl,68:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt},{12:$V11,35:199,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,53:197,54:198},{2:$VS,9:[1,201],12:$VT,17:146,18:147,24:174,25:148,26:149,27:150,28:151,29:152,30:153,31:$VU,33:$VV,34:$VW,35:25,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,46:$VX,50:$VY,51:$VZ,52:$V_,64:$V$},o($Vc,[2,77]),o($Vc,[2,76]),{62:[1,202]},o($Vc,[2,71]),o($V01,[2,30]),{48:[1,203],68:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG},{65:[1,204]},{2:$VS,9:[1,205],12:$VT,17:146,18:147,24:174,25:148,26:149,27:150,28:151,29:152,30:153,31:$VU,33:$VV,34:$VW,35:25,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,46:$VX,50:$VY,51:$VZ,52:$V_,64:$V$},{50:[1,206]},{48:[1,207],68:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG},{8:[1,208]},{8:[1,209]},{12:$Vd,41:210},{42:[1,211],44:[1,212],45:[1,213]},o($Vc,[2,75]),{48:[1,214]},{13:[1,215]},{67:[1,216]},{50:[1,217]},{47:[1,218]},{13:[1,219]},{12:$VH,32:220,47:$Vl,68:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt},{12:$VH,32:221,47:$Vl,68:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt},{42:[1,222],43:$Vi},{12:$VH,32:223,47:$Vl,68:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt},o($V21,[2,66]),o($V21,[2,67]),{13:[1,224]},{2:$VS,9:[1,226],12:$VT,17:146,18:147,23:225,24:145,25:148,26:149,27:150,28:151,29:152,30:153,31:$VU,33:$VV,34:$VW,35:25,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,46:$VX,50:$VY,51:$VZ,52:$V_,64:$V$},{47:[1,227]},{47:[1,228]},{12:$VH,32:229,47:$Vl,68:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt},{2:$VS,9:[1,231],12:$VT,17:146,18:147,23:230,24:145,25:148,26:149,27:150,28:151,29:152,30:153,31:$VU,33:$VV,34:$VW,35:25,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,46:$VX,50:$VY,51:$VZ,52:$V_,64:$V$},{8:[1,232],68:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG},{8:[1,233],68:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG},{12:$VH,32:234,47:$Vl,68:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt},o($V21,[2,65],{68:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG}),{2:$VS,12:$VT,17:146,18:147,23:235,24:145,25:148,26:149,27:150,28:151,29:152,30:153,31:$VU,33:$VV,34:$VW,35:25,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,46:$VX,50:$VY,51:$VZ,52:$V_,64:$V$},{2:$VS,9:[1,236],12:$VT,17:146,18:147,24:174,25:148,26:149,27:150,28:151,29:152,30:153,31:$VU,33:$VV,34:$VW,35:25,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,46:$VX,50:$VY,51:$VZ,52:$V_,64:$V$},o($V01,[2,51],{49:[1,237]}),{12:$VH,32:238,47:$Vl,68:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt},{12:$VH,32:239,47:$Vl,68:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt},{48:[1,240],68:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG},{2:$VS,9:[1,241],12:$VT,17:146,18:147,24:174,25:148,26:149,27:150,28:151,29:152,30:153,31:$VU,33:$VV,34:$VW,35:25,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,46:$VX,50:$VY,51:$VZ,52:$V_,64:$V$},o($V01,[2,57]),{12:$V11,54:242},{12:$V11,54:243},{8:[2,64],68:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG},{2:$VS,9:[1,244],12:$VT,17:146,18:147,24:174,25:148,26:149,27:150,28:151,29:152,30:153,31:$VU,33:$VV,34:$VW,35:25,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,46:$VX,50:$VY,51:$VZ,52:$V_,64:$V$},o($V01,[2,48],{49:[1,245]}),{13:[1,247],25:246,46:$VX},{48:[1,248],68:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG},{48:[1,249],68:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG},{8:[1,250]},o($V01,[2,56]),{48:[1,251]},{48:[1,252]},o($Vc,[2,79]),{13:[1,254],25:253,46:$VX},o($V01,[2,52]),{2:$VS,9:[1,256],12:$VT,17:146,18:147,23:255,24:145,25:148,26:149,27:150,28:151,29:152,30:153,31:$VU,33:$VV,34:$VW,35:25,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,46:$VX,50:$VY,51:$VZ,52:$V_,64:$V$},{8:[1,257]},{8:[1,258]},o($V01,[2,59]),{13:[1,259]},{13:[1,260]},o($V01,[2,49]),{2:$VS,9:[1,262],12:$VT,17:146,18:147,23:261,24:145,25:148,26:149,27:150,28:151,29:152,30:153,31:$VU,33:$VV,34:$VW,35:25,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,46:$VX,50:$VY,51:$VZ,52:$V_,64:$V$},{2:$VS,9:[1,263],12:$VT,17:146,18:147,24:174,25:148,26:149,27:150,28:151,29:152,30:153,31:$VU,33:$VV,34:$VW,35:25,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,46:$VX,50:$VY,51:$VZ,52:$V_,64:$V$},o($V01,[2,55]),o($V01,[2,88]),o($V01,[2,58]),{2:$VS,9:[1,265],12:$VT,17:146,18:147,23:264,24:145,25:148,26:149,27:150,28:151,29:152,30:153,31:$VU,33:$VV,34:$VW,35:25,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,46:$VX,50:$VY,51:$VZ,52:$V_,64:$V$},{2:$VS,9:[1,267],12:$VT,17:146,18:147,23:266,24:145,25:148,26:149,27:150,28:151,29:152,30:153,31:$VU,33:$VV,34:$VW,35:25,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,46:$VX,50:$VY,51:$VZ,52:$V_,64:$V$},{2:$VS,9:[1,268],12:$VT,17:146,18:147,24:174,25:148,26:149,27:150,28:151,29:152,30:153,31:$VU,33:$VV,34:$VW,35:25,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,46:$VX,50:$VY,51:$VZ,52:$V_,64:$V$},o($V01,[2,54]),o($V01,[2,53]),{2:$VS,9:[1,269],12:$VT,17:146,18:147,24:174,25:148,26:149,27:150,28:151,29:152,30:153,31:$VU,33:$VV,34:$VW,35:25,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,46:$VX,50:$VY,51:$VZ,52:$V_,64:$V$},o($V01,[2,61]),{2:$VS,9:[1,270],12:$VT,17:146,18:147,24:174,25:148,26:149,27:150,28:151,29:152,30:153,31:$VU,33:$VV,34:$VW,35:25,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,46:$VX,50:$VY,51:$VZ,52:$V_,64:$V$},o($V01,[2,63]),o($V01,[2,50]),o($V01,[2,60]),o($V01,[2,62])],
defaultActions: {7:[2,1],27:[2,34],28:[2,35],29:[2,36],30:[2,37],31:[2,38],47:[2,46],48:[2,47],59:[2,45],76:[2,40],121:[2,85],135:[2,84]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

        const nodo_ast = require('./AST/nodo_ast');
        const error = require('./AST/errores.js');
		const token = require('./AST/tokens.js');

        var lista_errores = new Array();
		
        let cont =0;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*Ignorar comentarios de una linea*/
break;
case 1:/*Ignorar comentarios con multiples lneas*/
break;
case 2:/* skip whitespace */
break;
case 3:return  'decimal'
break;
case 4:return  'num'
break;
case 5:return  'cadena'
break;
case 6:return  'caracter'
break;
case 7:return  'inc'
break;
case 8:return  'dec'
break;
case 9:return  'por'
break;
case 10:return  'div'
break;
case 11:return  'pyc'
break;
case 12:return  'menos'
break;
case 13:return  'mas'
break;
case 14:return 73
break;
case 15:return  'or'
break;
case 16:return  'and'
break;
case 17:return  'diferente'
break;
case 18:return  'not'
break;
case 19:return  'menor_igual'
break;
case 20:return  'mayor_igual'
break;
case 21:return  'menorq'
break;
case 22:return  'mayorq'
break;
case 23:return  'igual_igual'
break;
case 24:return  'igual'
break;
case 25:return  'para'
break;
case 26:return  'parc'
break;
case 27:return  'llaveC'
break;
case 28:return  'llaveA'
break;
case 29:return  'corA'
break;
case 30:return  'corC'
break;
case 31:return  'punto'
break;
case 32:return  'coma'
break;
case 33:return  'entero'
break;
case 34:return  't_string'
break;
case 35:return  'booleano'
break;
case 36:return  'verdadero'
break;
case 37:return  'falso'
break;
case 38:return  'si'
break;
case 39:return  'sino'
break;
case 40:return  'void_'
break;
case 41:return  'mientras'
break;
case 42:return  'hacer'
break;
case 43:return  'imprimir'
break;
case 44:return  'imprimir'
break;
case 45:return	'retorno'
break;
case 46:return  'doble'
break;
case 47:return  't_caracter'
break;
case 48:return  'publico'
break;
case 49:return  'clase'
break;
case 50:return  'inter'
break;
case 51:return  'c_for'
break;
case 52:return  'brk'
break;
case 53:return  'statico'
break;
case 54:return	'argumentos'
break;
case 55:return  'reservada_main'
break;
case 56:return  'cont'
break;
case 57:return  'sistem'
break;
case 58:return  'salida'
break;
case 59:return  'id'
break;
case 60: /*se ignoran*/ 
break;
case 61:return 5
break;
case 62:lista_errores.push(new error("Caracter "+yy_.yytext +" no se esperaba." ,"LEXICO", yy_.yylineno+1, yy_.yylloc.last_column+1,yy_.yytext))
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*((\*+[^/*])|([^*]))*\**\*\/)/,/^(?:\s+)/,/^(?:(([0-9]+)\.([0-9]+)))/,/^(?:([0-9]+))/,/^(?:(("((\\([\'\"\\bfnrtv]))|([^\"\\]+))*")))/,/^(?:((')[^'](')))/,/^(?:\+\+)/,/^(?:--)/,/^(?:\*)/,/^(?:\/)/,/^(?:;)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!=)/,/^(?:!)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:\})/,/^(?:\{)/,/^(?:\[)/,/^(?:\])/,/^(?:\.)/,/^(?:,)/,/^(?:int\b)/,/^(?:String\b)/,/^(?:boolean\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:void\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:return\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:public\b)/,/^(?:class\b)/,/^(?:interface\b)/,/^(?:for\b)/,/^(?:break\b)/,/^(?:static\b)/,/^(?:args\b)/,/^(?:main\b)/,/^(?:continue\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:(([a-zA-ZñÑ]|_)([a-zA-ZñÑ]|[0-9]|_)*))/,/^(?:[ \t\r\n\f])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}